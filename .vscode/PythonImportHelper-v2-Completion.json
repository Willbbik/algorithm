[
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "box = []\nfor i in range(N):\n    # box.append(list(map(int, lines[i+1].split())))\n    box.append(list(map(int, input().split())))\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()\n    for i in range(4):",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "Q = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()\n    for i in range(4):\n        nextX = nowX + moveX[i]",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "maxDay",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "maxDay = max(map(max, box))\nhasZero = any(0 in row for row in box)\nif(maxDay == 1):\n    print(0)\nelif(hasZero):\n    print(-1)\nelse:\n    print(maxDay-1)",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "hasZero",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "hasZero = any(0 in row for row in box)\nif(maxDay == 1):\n    print(0)\nelif(hasZero):\n    print(-1)\nelse:\n    print(maxDay-1)",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]\n            newX = x + moveX[i]\n            if(newY < 0 or newX < 0 or newY >= n or newX >= m):",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ncnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ncnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "cnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]\n            newX = x + moveX[i]",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "T = int(input())\nfor _ in range(T):\n    # m=가로, n=세로, k=심어져있는배추개수\n    m, n, k = map(int, input().split())\n    graph = [[0]*m for _ in range(n)]\n    # 그래프 그리기\n    for _ in range(k):\n        x, y = map(int, input().split())\n        graph[y][x] = 1\n    # 인접 행렬 그래프이기 때문에 전체를 순환하면서 확인",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "def bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:\n        a = Q.popleft()\n        for i in list[a]:\n            if(visited[i] == False):\n                visited[i] = True\n                Q.append(i)\nfor i in range(1, N+1):",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "input = sys.stdin.readline\nN, M = map(int, input().split())\nlist = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "list = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "visited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "cnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:\n        a = Q.popleft()",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "def bfs():\n    Q = deque([1])\n    while Q:\n        a = Q.popleft()\n        for i in graph[a]:\n            if(maps[i] == 0):\n                maps[i] = a\n                Q.append(i)\nbfs()\nfor i in range(2, N+1):",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "input = sys.stdin.readline\nN = int(input())\ngraph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "N = int(input())\ngraph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "graph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])\n    while Q:",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "maps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])\n    while Q:\n        a = Q.popleft()",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.1697",
        "description": "백준.실버.1697",
        "peekOfCode": "def bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]\n        for i in (a-1, a+1, a*2):\n            if(i >= 0 and i <= MAX and visited[i] == 0):",
        "detail": "백준.실버.1697",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "백준.실버.1697",
        "description": "백준.실버.1697",
        "peekOfCode": "MAX = 10 ** 5\nvisited = [0]* (MAX+1)\ndef bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]",
        "detail": "백준.실버.1697",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.1697",
        "description": "백준.실버.1697",
        "peekOfCode": "visited = [0]* (MAX+1)\ndef bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]\n        for i in (a-1, a+1, a*2):",
        "detail": "백준.실버.1697",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        a, b = Q.popleft()\n        for i in range(4):\n            nextX = a + moveX[i]\n            nextY = b + moveY[i]\n            # 범위를 벗어났거나 물에 잠긴 경우 스킵",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "N = int(sys.stdin.readline())\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "graph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "maxRegion",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "maxRegion = max(map(max, graph))\ncounts = []\nfor r in range(maxRegion+1):\n    visited = [[False] * N for _ in range(N)]\n    cnt = 0\n    for i in range(N): #행\n        for k in range(N):  #열\n            if(graph[i][k] > r and not visited[i][k]):\n                bfs(i, k)\n                cnt += 1",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "counts = []\nfor r in range(maxRegion+1):\n    visited = [[False] * N for _ in range(N)]\n    cnt = 0\n    for i in range(N): #행\n        for k in range(N):  #열\n            if(graph[i][k] > r and not visited[i][k]):\n                bfs(i, k)\n                cnt += 1\n    counts.append(cnt)",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "input = sys.stdin.read\ninput_data = input().splitlines()\nN = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "input_data = input().splitlines()\nN = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "N = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "M = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "graph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0\nQ = deque([1])",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "visited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0\nQ = deque([1])\nwhile Q:",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "visited[1]",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "visited[1] = True\ncnt = 0\nQ = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "cnt = 0\nQ = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1\nprint(cnt)",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "백준.실버.2606",
        "description": "백준.실버.2606",
        "peekOfCode": "Q = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1\nprint(cnt)",
        "detail": "백준.실버.2606",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "def bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):\n            ny = y + moveY[i]\n            nx = x + moveX[i]",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "n = int(input())\ncnt = 0\nmapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "cnt = 0\nmapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "mapCnts",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "mapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "arr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):\n            ny = y + moveY[i]",
        "detail": "백준.실버.2667",
        "documentation": {}
    }
]