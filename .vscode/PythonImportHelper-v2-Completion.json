[
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            nextX = nowX + moveX[i]\n            nextY = nowY + moveY[i]\n            if(nextX >= N or nextY >= N or nextX < 0 or nextY < 0):",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "N = int(input())\nnormalCnt = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "normalCnt",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "normalCnt = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "cnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "moveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "originPicture",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "originPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.10026",
        "description": "백준.골드.bfsdfs.10026",
        "peekOfCode": "result = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        nowX, nowY = Q.popleft()",
        "detail": "백준.골드.bfsdfs.10026",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.1261",
        "description": "백준.골드.bfsdfs.1261",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]\n    while Q:\n        nowY, nowX = Q.popleft()\n        for i in range(4):\n            nextX = nowX + moveX[i] # 열\n            nextY = nowY + moveY[i] # 행\n            if(nextX >= M or nextX < 0 or nextY >= N or nextY < 0):",
        "detail": "백준.골드.bfsdfs.1261",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.1261",
        "description": "백준.골드.bfsdfs.1261",
        "peekOfCode": "graph = []\ndist = [[-1] * M for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))",
        "detail": "백준.골드.bfsdfs.1261",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.1261",
        "description": "백준.골드.bfsdfs.1261",
        "peekOfCode": "dist = [[-1] * M for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]",
        "detail": "백준.골드.bfsdfs.1261",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.1261",
        "description": "백준.골드.bfsdfs.1261",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]\n    while Q:",
        "detail": "백준.골드.bfsdfs.1261",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.1261",
        "description": "백준.골드.bfsdfs.1261",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]\n    while Q:\n        nowY, nowX = Q.popleft()",
        "detail": "백준.골드.bfsdfs.1261",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.13265",
        "description": "백준.골드.bfsdfs.13265",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef bfs(node):\n    Q = deque()\n    Q.append(node)\n    colors[node] = 0\n    while Q:\n        a = Q.popleft()\n        for b in maps[a]:\n            # 연결",
        "detail": "백준.골드.bfsdfs.13265",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.13265",
        "description": "백준.골드.bfsdfs.13265",
        "peekOfCode": "def bfs(node):\n    Q = deque()\n    Q.append(node)\n    colors[node] = 0\n    while Q:\n        a = Q.popleft()\n        for b in maps[a]:\n            # 연결\n            if(colors[b] == -1):\n                Q.append(b)",
        "detail": "백준.골드.bfsdfs.13265",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.13265",
        "description": "백준.골드.bfsdfs.13265",
        "peekOfCode": "T = int(input())\n# 테스트 케이스 개수만큼 반복\nfor _ in range(T):\n    n, m = map(int, input().split(\" \"))\n    result = []\n    # 인접 리스트\n    maps = [[] for _ in range(n + 1)]\n    colors = [-1] * (n + 1)\n    # 동그라미 연결\n    for _ in range(m):",
        "detail": "백준.골드.bfsdfs.13265",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.13549",
        "description": "백준.골드.bfsdfs.13549",
        "peekOfCode": "def bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()\n        if(current == taret):\n            return graph[current]\n        a = current * 2\n        b = current + 1",
        "detail": "백준.골드.bfsdfs.13549",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.13549",
        "description": "백준.골드.bfsdfs.13549",
        "peekOfCode": "data = input().split(\" \")\nN, K = map(int, data)\nMAX = 200000\ngraph = [-1] * (MAX + 1)\ndef bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()",
        "detail": "백준.골드.bfsdfs.13549",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.13549",
        "description": "백준.골드.bfsdfs.13549",
        "peekOfCode": "MAX = 200000\ngraph = [-1] * (MAX + 1)\ndef bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()\n        if(current == taret):\n            return graph[current]",
        "detail": "백준.골드.bfsdfs.13549",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.13549",
        "description": "백준.골드.bfsdfs.13549",
        "peekOfCode": "graph = [-1] * (MAX + 1)\ndef bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()\n        if(current == taret):\n            return graph[current]\n        a = current * 2",
        "detail": "백준.골드.bfsdfs.13549",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    union = []\n    union.append((x, y))\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            nX = nowX + moveX[i]",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nstart = True\ntemp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nstart = True\ntemp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "start = True\ntemp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "temp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "graph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "day",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.16234",
        "description": "백준.골드.bfsdfs.16234",
        "peekOfCode": "day = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    union = []",
        "detail": "백준.골드.bfsdfs.16234",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.1707",
        "description": "백준.골드.bfsdfs.1707",
        "peekOfCode": "def bfs(value):\n    Q = deque()\n    Q.append(value)\n    colors[value] = 0\n    while Q:\n        a = Q.popleft()\n        for z in maps[a]:\n            # 첫 방문이라면 원본 노드의 반대 색상\n            if(colors[z] == -1):\n                Q.append(z)",
        "detail": "백준.골드.bfsdfs.1707",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.1707",
        "description": "백준.골드.bfsdfs.1707",
        "peekOfCode": "K = int(sys.stdin.readline())\nfor _ in range(K):\n    V, E = map(int, sys.stdin.readline().split(\" \"))\n    maps = [[] for _ in range(V+1)]\n    colors = [-1] * (V+1)\n    # 인접리스트 구현\n    for _ in range(E):\n        u, v = map(int, sys.stdin.readline().split(\" \"))\n        maps[u].append(v)\n        maps[v].append(u)",
        "detail": "백준.골드.bfsdfs.1707",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            newX = nowX + moveX[i]",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            newX = nowX + moveX[i]\n            newY = nowY + moveY[i]\n            if(newY >= N or newY < 0 or newX >= M or newX < 0):",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nresult = True\nyear = 0\ncnt = 0\nfor _ in range(N):\n    maps.append(list(map(int , input().split(\" \"))))\nwhile result:\n    visited = [[False] * (M+1) for _ in range(N+1)]",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nmaps = []\nresult = True\nyear = 0\ncnt = 0\nfor _ in range(N):\n    maps.append(list(map(int , input().split(\" \"))))\nwhile result:\n    visited = [[False] * (M+1) for _ in range(N+1)]\n    waters = [[0] * (M+1) for _ in range(N+1)]",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "maps = []\nresult = True\nyear = 0\ncnt = 0\nfor _ in range(N):\n    maps.append(list(map(int , input().split(\" \"))))\nwhile result:\n    visited = [[False] * (M+1) for _ in range(N+1)]\n    waters = [[0] * (M+1) for _ in range(N+1)]\n    # 빙하 덩어리 개수 구하기",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "result = True\nyear = 0\ncnt = 0\nfor _ in range(N):\n    maps.append(list(map(int , input().split(\" \"))))\nwhile result:\n    visited = [[False] * (M+1) for _ in range(N+1)]\n    waters = [[0] * (M+1) for _ in range(N+1)]\n    # 빙하 덩어리 개수 구하기\n    for y in range(N):",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "year = 0\ncnt = 0\nfor _ in range(N):\n    maps.append(list(map(int , input().split(\" \"))))\nwhile result:\n    visited = [[False] * (M+1) for _ in range(N+1)]\n    waters = [[0] * (M+1) for _ in range(N+1)]\n    # 빙하 덩어리 개수 구하기\n    for y in range(N):\n        for x in range(M):",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2573-bfs",
        "description": "백준.골드.bfsdfs.2573-bfs",
        "peekOfCode": "cnt = 0\nfor _ in range(N):\n    maps.append(list(map(int , input().split(\" \"))))\nwhile result:\n    visited = [[False] * (M+1) for _ in range(N+1)]\n    waters = [[0] * (M+1) for _ in range(N+1)]\n    # 빙하 덩어리 개수 구하기\n    for y in range(N):\n        for x in range(M):\n            if(visited[y][x] == False and maps[y][x] != 0):",
        "detail": "백준.골드.bfsdfs.2573-bfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.bfsdfs.2665",
        "description": "백준.골드.bfsdfs.2665",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            nX = nowX + moveX[i]\n            nY = nowY + moveY[i]\n            if(nX >= N or nX < 0 or nY >= N or nY < 0):",
        "detail": "백준.골드.bfsdfs.2665",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2665",
        "description": "백준.골드.bfsdfs.2665",
        "peekOfCode": "N = int(input())\ngraph = []\ndist = [[-1] * N for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.골드.bfsdfs.2665",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2665",
        "description": "백준.골드.bfsdfs.2665",
        "peekOfCode": "graph = []\ndist = [[-1] * N for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.골드.bfsdfs.2665",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2665",
        "description": "백준.골드.bfsdfs.2665",
        "peekOfCode": "dist = [[-1] * N for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0",
        "detail": "백준.골드.bfsdfs.2665",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2665",
        "description": "백준.골드.bfsdfs.2665",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0\n    while Q:",
        "detail": "백준.골드.bfsdfs.2665",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.2665",
        "description": "백준.골드.bfsdfs.2665",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0\n    while Q:\n        nowX, nowY = Q.popleft()",
        "detail": "백준.골드.bfsdfs.2665",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.7576",
        "description": "백준.골드.bfsdfs.7576",
        "peekOfCode": "box = []\nfor i in range(N):\n    # box.append(list(map(int, lines[i+1].split())))\n    box.append(list(map(int, input().split())))\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):",
        "detail": "백준.골드.bfsdfs.7576",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.7576",
        "description": "백준.골드.bfsdfs.7576",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()",
        "detail": "백준.골드.bfsdfs.7576",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.7576",
        "description": "백준.골드.bfsdfs.7576",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()\n    for i in range(4):",
        "detail": "백준.골드.bfsdfs.7576",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.7576",
        "description": "백준.골드.bfsdfs.7576",
        "peekOfCode": "Q = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()\n    for i in range(4):\n        nextX = nowX + moveX[i]",
        "detail": "백준.골드.bfsdfs.7576",
        "documentation": {}
    },
    {
        "label": "maxDay",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.7576",
        "description": "백준.골드.bfsdfs.7576",
        "peekOfCode": "maxDay = max(map(max, box))\nhasZero = any(0 in row for row in box)\nif(maxDay == 1):\n    print(0)\nelif(hasZero):\n    print(-1)\nelse:\n    print(maxDay-1)",
        "detail": "백준.골드.bfsdfs.7576",
        "documentation": {}
    },
    {
        "label": "hasZero",
        "kind": 5,
        "importPath": "백준.골드.bfsdfs.7576",
        "description": "백준.골드.bfsdfs.7576",
        "peekOfCode": "hasZero = any(0 in row for row in box)\nif(maxDay == 1):\n    print(0)\nelif(hasZero):\n    print(-1)\nelse:\n    print(maxDay-1)",
        "detail": "백준.골드.bfsdfs.7576",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.브론즈.10817",
        "description": "백준.브론즈.10817",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\nA, B, C = map(int, input().split(\" \"))\narr = []\narr.append(A)\narr.append(B)\narr.append(C)\narr.sort()\nprint(arr[1])",
        "detail": "백준.브론즈.10817",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.브론즈.10817",
        "description": "백준.브론즈.10817",
        "peekOfCode": "arr = []\narr.append(A)\narr.append(B)\narr.append(C)\narr.sort()\nprint(arr[1])",
        "detail": "백준.브론즈.10817",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.1012",
        "description": "백준.실버.bfsdfs.1012",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]\n            newX = x + moveX[i]\n            if(newY < 0 or newX < 0 or newY >= n or newX >= m):",
        "detail": "백준.실버.bfsdfs.1012",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1012",
        "description": "백준.실버.bfsdfs.1012",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ncnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.bfsdfs.1012",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1012",
        "description": "백준.실버.bfsdfs.1012",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ncnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]",
        "detail": "백준.실버.bfsdfs.1012",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1012",
        "description": "백준.실버.bfsdfs.1012",
        "peekOfCode": "cnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]\n            newX = x + moveX[i]",
        "detail": "백준.실버.bfsdfs.1012",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1012",
        "description": "백준.실버.bfsdfs.1012",
        "peekOfCode": "T = int(input())\nfor _ in range(T):\n    # m=가로, n=세로, k=심어져있는배추개수\n    m, n, k = map(int, input().split())\n    graph = [[0]*m for _ in range(n)]\n    # 그래프 그리기\n    for _ in range(k):\n        x, y = map(int, input().split())\n        graph[y][x] = 1\n    # 인접 행렬 그래프이기 때문에 전체를 순환하면서 확인",
        "detail": "백준.실버.bfsdfs.1012",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.11724",
        "description": "백준.실버.bfsdfs.11724",
        "peekOfCode": "def bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:\n        a = Q.popleft()\n        for i in list[a]:\n            if(visited[i] == False):\n                visited[i] = True\n                Q.append(i)\nfor i in range(1, N+1):",
        "detail": "백준.실버.bfsdfs.11724",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11724",
        "description": "백준.실버.bfsdfs.11724",
        "peekOfCode": "input = sys.stdin.readline\nN, M = map(int, input().split())\nlist = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):",
        "detail": "백준.실버.bfsdfs.11724",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11724",
        "description": "백준.실버.bfsdfs.11724",
        "peekOfCode": "list = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True",
        "detail": "백준.실버.bfsdfs.11724",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11724",
        "description": "백준.실버.bfsdfs.11724",
        "peekOfCode": "visited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:",
        "detail": "백준.실버.bfsdfs.11724",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11724",
        "description": "백준.실버.bfsdfs.11724",
        "peekOfCode": "cnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:\n        a = Q.popleft()",
        "detail": "백준.실버.bfsdfs.11724",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.11725",
        "description": "백준.실버.bfsdfs.11725",
        "peekOfCode": "def bfs():\n    Q = deque([1])\n    while Q:\n        a = Q.popleft()\n        for i in graph[a]:\n            if(maps[i] == 0):\n                maps[i] = a\n                Q.append(i)\nbfs()\nfor i in range(2, N+1):",
        "detail": "백준.실버.bfsdfs.11725",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11725",
        "description": "백준.실버.bfsdfs.11725",
        "peekOfCode": "input = sys.stdin.readline\nN = int(input())\ngraph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():",
        "detail": "백준.실버.bfsdfs.11725",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11725",
        "description": "백준.실버.bfsdfs.11725",
        "peekOfCode": "N = int(input())\ngraph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])",
        "detail": "백준.실버.bfsdfs.11725",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11725",
        "description": "백준.실버.bfsdfs.11725",
        "peekOfCode": "graph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])\n    while Q:",
        "detail": "백준.실버.bfsdfs.11725",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.11725",
        "description": "백준.실버.bfsdfs.11725",
        "peekOfCode": "maps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])\n    while Q:\n        a = Q.popleft()",
        "detail": "백준.실버.bfsdfs.11725",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.14940",
        "description": "백준.실버.bfsdfs.14940",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef bfs(y, x):\n    Q = deque()\n    Q.append((y, x))\n    visited[y][x] = True\n    arr[y][x] = 0\n    while Q:\n        a, b = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.bfsdfs.14940",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.14940",
        "description": "백준.실버.bfsdfs.14940",
        "peekOfCode": "def bfs(y, x):\n    Q = deque()\n    Q.append((y, x))\n    visited[y][x] = True\n    arr[y][x] = 0\n    while Q:\n        a, b = Q.popleft()\n        for i in range(4):\n            ny = a + moveY[i]\n            nx = b + moveX[i]",
        "detail": "백준.실버.bfsdfs.14940",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.14940",
        "description": "백준.실버.bfsdfs.14940",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nn, m = map(int, input().split(\" \"))\narr = []\nvisited = [[False] * m for _ in range(n)]\nfor i in range(n):\n    arr.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(arr[y][x] == 2 and visited[y][x] == False):",
        "detail": "백준.실버.bfsdfs.14940",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.14940",
        "description": "백준.실버.bfsdfs.14940",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nn, m = map(int, input().split(\" \"))\narr = []\nvisited = [[False] * m for _ in range(n)]\nfor i in range(n):\n    arr.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(arr[y][x] == 2 and visited[y][x] == False):\n            bfs(y, x)",
        "detail": "백준.실버.bfsdfs.14940",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.14940",
        "description": "백준.실버.bfsdfs.14940",
        "peekOfCode": "arr = []\nvisited = [[False] * m for _ in range(n)]\nfor i in range(n):\n    arr.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(arr[y][x] == 2 and visited[y][x] == False):\n            bfs(y, x)\nfor y in range(n):\n    for x in range(m):",
        "detail": "백준.실버.bfsdfs.14940",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.14940",
        "description": "백준.실버.bfsdfs.14940",
        "peekOfCode": "visited = [[False] * m for _ in range(n)]\nfor i in range(n):\n    arr.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(arr[y][x] == 2 and visited[y][x] == False):\n            bfs(y, x)\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and arr[y][x] != 0):",
        "detail": "백준.실버.bfsdfs.14940",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.1697",
        "description": "백준.실버.bfsdfs.1697",
        "peekOfCode": "def bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]\n        for i in (a-1, a+1, a*2):\n            if(i >= 0 and i <= MAX and visited[i] == 0):",
        "detail": "백준.실버.bfsdfs.1697",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1697",
        "description": "백준.실버.bfsdfs.1697",
        "peekOfCode": "MAX = 10 ** 5\nvisited = [0]* (MAX+1)\ndef bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]",
        "detail": "백준.실버.bfsdfs.1697",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1697",
        "description": "백준.실버.bfsdfs.1697",
        "peekOfCode": "visited = [0]* (MAX+1)\ndef bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]\n        for i in (a-1, a+1, a*2):",
        "detail": "백준.실버.bfsdfs.1697",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    nodeCnt = 1\n    while Q:\n        nX, nY = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    nodeCnt = 1\n    while Q:\n        nX, nY = Q.popleft()\n        for i in range(4):\n            newX = nX + moveX[i]\n            newY = nY + moveY[i]",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "maxWidth",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "maxWidth = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "cnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = bfs(x, y)",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "maps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = bfs(x, y)\n            if(result > maxWidth):",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-bfs",
        "description": "백준.실버.bfsdfs.1926-bfs",
        "peekOfCode": "visited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = bfs(x, y)\n            if(result > maxWidth):\n                maxWidth = result",
        "detail": "백준.실버.bfsdfs.1926-bfs",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef dfs(x, y, count):\n    visited[y][x] = True\n    for i in range(4):\n        newX = x + moveX[i]\n        newY = y + moveY[i]\n        if(visited[newY][newX] == True):\n            continue\n        if(newY >= n or newY < 0 or newX >= m or newX < 0):",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "def dfs(x, y, count):\n    visited[y][x] = True\n    for i in range(4):\n        newX = x + moveX[i]\n        newY = y + moveY[i]\n        if(visited[newY][newX] == True):\n            continue\n        if(newY >= n or newY < 0 or newX >= m or newX < 0):\n            continue\n        if(maps[newY][newX] == 1):",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "maxWidth",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "maxWidth = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "cnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = dfs(x, y, 0)",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "maps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = dfs(x, y, 0)\n            if(result > maxWidth):",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.1926-dfs",
        "description": "백준.실버.bfsdfs.1926-dfs",
        "peekOfCode": "visited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = dfs(x, y, 0)\n            if(result > maxWidth):\n                maxWidth = result",
        "detail": "백준.실버.bfsdfs.1926-dfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        a, b = Q.popleft()\n        for i in range(4):\n            nextX = a + moveX[i]\n            nextY = b + moveY[i]\n            # 범위를 벗어났거나 물에 잠긴 경우 스킵",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "N = int(sys.stdin.readline())\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "graph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "maxRegion",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "maxRegion = max(map(max, graph))\ncounts = []\nfor r in range(maxRegion+1):\n    visited = [[False] * N for _ in range(N)]\n    cnt = 0\n    for i in range(N): #행\n        for k in range(N):  #열\n            if(graph[i][k] > r and not visited[i][k]):\n                bfs(i, k)\n                cnt += 1",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2468",
        "description": "백준.실버.bfsdfs.2468",
        "peekOfCode": "counts = []\nfor r in range(maxRegion+1):\n    visited = [[False] * N for _ in range(N)]\n    cnt = 0\n    for i in range(N): #행\n        for k in range(N):  #열\n            if(graph[i][k] > r and not visited[i][k]):\n                bfs(i, k)\n                cnt += 1\n    counts.append(cnt)",
        "detail": "백준.실버.bfsdfs.2468",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "input = sys.stdin.read\ninput_data = input().splitlines()\nN = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "input_data = input().splitlines()\nN = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "N = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "M = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "graph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0\nQ = deque([1])",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "visited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0\nQ = deque([1])\nwhile Q:",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "visited[1]",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "visited[1] = True\ncnt = 0\nQ = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "cnt = 0\nQ = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1\nprint(cnt)",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-bfs",
        "description": "백준.실버.bfsdfs.2606-bfs",
        "peekOfCode": "Q = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1\nprint(cnt)",
        "detail": "백준.실버.bfsdfs.2606-bfs",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef dfs(node):\n    visited[node] = True\n    global cnt\n    for e in maps[node]:\n        if(visited[e] == False):\n            cnt += 1\n            dfs(e)\nN = int(input())",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "def dfs(node):\n    visited[node] = True\n    global cnt\n    for e in maps[node]:\n        if(visited[e] == False):\n            cnt += 1\n            dfs(e)\nN = int(input())\nK = int(input())\nglobal cnt",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "N = int(input())\nK = int(input())\nglobal cnt\nmaps = [[] for _ in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "K = int(input())\nglobal cnt\nmaps = [[] for _ in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "maps = [[] for _ in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)\ndfs(1)\nprint(cnt)",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "visited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)\ndfs(1)\nprint(cnt)",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2606-dfs",
        "description": "백준.실버.bfsdfs.2606-dfs",
        "peekOfCode": "cnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)\ndfs(1)\nprint(cnt)",
        "detail": "백준.실버.bfsdfs.2606-dfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "def bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):\n            ny = y + moveY[i]\n            nx = x + moveX[i]",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "n = int(input())\ncnt = 0\nmapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "cnt = 0\nmapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "mapCnts",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "mapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "arr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.bfsdfs.2667",
        "description": "백준.실버.bfsdfs.2667",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):\n            ny = y + moveY[i]",
        "detail": "백준.실버.bfsdfs.2667",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.1018",
        "description": "백준.실버.bruteforce.1018",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\nN, M = map(int, input().split(\" \"))\nresult = []\nmaps = []\nfor _ in range(N):\n    maps.append(list(input()))\nfor y in range(N-7):\n    for x in range(M-7):\n        white = 0",
        "detail": "백준.실버.bruteforce.1018",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1018",
        "description": "백준.실버.bruteforce.1018",
        "peekOfCode": "result = []\nmaps = []\nfor _ in range(N):\n    maps.append(list(input()))\nfor y in range(N-7):\n    for x in range(M-7):\n        white = 0\n        black = 0\n        for a in range(y, y+8):\n            for b in range(x, x+8):",
        "detail": "백준.실버.bruteforce.1018",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1018",
        "description": "백준.실버.bruteforce.1018",
        "peekOfCode": "maps = []\nfor _ in range(N):\n    maps.append(list(input()))\nfor y in range(N-7):\n    for x in range(M-7):\n        white = 0\n        black = 0\n        for a in range(y, y+8):\n            for b in range(x, x+8):\n                # 짝수인 경우 무조건 첫 칸의 색깔과 같아야함",
        "detail": "백준.실버.bruteforce.1018",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.1057",
        "description": "백준.실버.bruteforce.1057",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\nN, K, I = map(int, input().split(\" \"))\nnowRound = 1\nmeet = False\nstop = False\nwhile not stop:\n    if(N < 2):\n        stop = True\n        break",
        "detail": "백준.실버.bruteforce.1057",
        "documentation": {}
    },
    {
        "label": "nowRound",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1057",
        "description": "백준.실버.bruteforce.1057",
        "peekOfCode": "nowRound = 1\nmeet = False\nstop = False\nwhile not stop:\n    if(N < 2):\n        stop = True\n        break\n    # 라운드 (for문이 끝나면 1라운드 종료)\n    for i in range(1, N, 2):\n        a = i",
        "detail": "백준.실버.bruteforce.1057",
        "documentation": {}
    },
    {
        "label": "meet",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1057",
        "description": "백준.실버.bruteforce.1057",
        "peekOfCode": "meet = False\nstop = False\nwhile not stop:\n    if(N < 2):\n        stop = True\n        break\n    # 라운드 (for문이 끝나면 1라운드 종료)\n    for i in range(1, N, 2):\n        a = i\n        b = i+1",
        "detail": "백준.실버.bruteforce.1057",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1057",
        "description": "백준.실버.bruteforce.1057",
        "peekOfCode": "stop = False\nwhile not stop:\n    if(N < 2):\n        stop = True\n        break\n    # 라운드 (for문이 끝나면 1라운드 종료)\n    for i in range(1, N, 2):\n        a = i\n        b = i+1\n        # 김씨와 임씨가 대결하는 라운드라면",
        "detail": "백준.실버.bruteforce.1057",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.10974",
        "description": "백준.실버.bruteforce.10974",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN = int(input())\narr = []\ndef backTracking():\n    if(len(arr) == N):\n        print(*arr)\n        return\n    for a in range(1, N+1):\n        if a not in arr:",
        "detail": "백준.실버.bruteforce.10974",
        "documentation": {}
    },
    {
        "label": "backTracking",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.10974",
        "description": "백준.실버.bruteforce.10974",
        "peekOfCode": "def backTracking():\n    if(len(arr) == N):\n        print(*arr)\n        return\n    for a in range(1, N+1):\n        if a not in arr:\n            arr.append(a)\n            backTracking()\n            arr.pop()\nbackTracking()",
        "detail": "백준.실버.bruteforce.10974",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.10974",
        "description": "백준.실버.bruteforce.10974",
        "peekOfCode": "N = int(input())\narr = []\ndef backTracking():\n    if(len(arr) == N):\n        print(*arr)\n        return\n    for a in range(1, N+1):\n        if a not in arr:\n            arr.append(a)\n            backTracking()",
        "detail": "백준.실버.bruteforce.10974",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.10974",
        "description": "백준.실버.bruteforce.10974",
        "peekOfCode": "arr = []\ndef backTracking():\n    if(len(arr) == N):\n        print(*arr)\n        return\n    for a in range(1, N+1):\n        if a not in arr:\n            arr.append(a)\n            backTracking()\n            arr.pop()",
        "detail": "백준.실버.bruteforce.10974",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.1436",
        "description": "백준.실버.bruteforce.1436",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\nN = int(input())\ncnt = 0\nresult = 666\nwhile True:\n    if \"666\" in str(result):\n        cnt += 1\n    if cnt == N:\n        break",
        "detail": "백준.실버.bruteforce.1436",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1436",
        "description": "백준.실버.bruteforce.1436",
        "peekOfCode": "N = int(input())\ncnt = 0\nresult = 666\nwhile True:\n    if \"666\" in str(result):\n        cnt += 1\n    if cnt == N:\n        break\n    result += 1\nprint(result)",
        "detail": "백준.실버.bruteforce.1436",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1436",
        "description": "백준.실버.bruteforce.1436",
        "peekOfCode": "cnt = 0\nresult = 666\nwhile True:\n    if \"666\" in str(result):\n        cnt += 1\n    if cnt == N:\n        break\n    result += 1\nprint(result)",
        "detail": "백준.실버.bruteforce.1436",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1436",
        "description": "백준.실버.bruteforce.1436",
        "peekOfCode": "result = 666\nwhile True:\n    if \"666\" in str(result):\n        cnt += 1\n    if cnt == N:\n        break\n    result += 1\nprint(result)",
        "detail": "백준.실버.bruteforce.1436",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.14501",
        "description": "백준.실버.bruteforce.14501",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN = int(input())\n# N+1일째 되는날까지 금액 계산이 필요하기 때문에.\ndp = [0] * (N+1)\ndays = [0] * (N)\nmoneys = [0] * (N)\nfor i in range(0, N):\n    T, P = map(int, input().split())\n    days[i] = T",
        "detail": "백준.실버.bruteforce.14501",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.14501",
        "description": "백준.실버.bruteforce.14501",
        "peekOfCode": "N = int(input())\n# N+1일째 되는날까지 금액 계산이 필요하기 때문에.\ndp = [0] * (N+1)\ndays = [0] * (N)\nmoneys = [0] * (N)\nfor i in range(0, N):\n    T, P = map(int, input().split())\n    days[i] = T\n    moneys[i] = P\n# N+1일째 되는날 완료되는 상담이 있는지 확인하기 위해서 N+1",
        "detail": "백준.실버.bruteforce.14501",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.14501",
        "description": "백준.실버.bruteforce.14501",
        "peekOfCode": "dp = [0] * (N+1)\ndays = [0] * (N)\nmoneys = [0] * (N)\nfor i in range(0, N):\n    T, P = map(int, input().split())\n    days[i] = T\n    moneys[i] = P\n# N+1일째 되는날 완료되는 상담이 있는지 확인하기 위해서 N+1\nfor i in range(N+1):\n    arr = []",
        "detail": "백준.실버.bruteforce.14501",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.14501",
        "description": "백준.실버.bruteforce.14501",
        "peekOfCode": "days = [0] * (N)\nmoneys = [0] * (N)\nfor i in range(0, N):\n    T, P = map(int, input().split())\n    days[i] = T\n    moneys[i] = P\n# N+1일째 되는날 완료되는 상담이 있는지 확인하기 위해서 N+1\nfor i in range(N+1):\n    arr = []\n    for k in range(0, i):",
        "detail": "백준.실버.bruteforce.14501",
        "documentation": {}
    },
    {
        "label": "moneys",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.14501",
        "description": "백준.실버.bruteforce.14501",
        "peekOfCode": "moneys = [0] * (N)\nfor i in range(0, N):\n    T, P = map(int, input().split())\n    days[i] = T\n    moneys[i] = P\n# N+1일째 되는날 완료되는 상담이 있는지 확인하기 위해서 N+1\nfor i in range(N+1):\n    arr = []\n    for k in range(0, i):\n        if(k + days[k] <= i):",
        "detail": "백준.실버.bruteforce.14501",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.1476",
        "description": "백준.실버.bruteforce.1476",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\nE, S, M = map(int, input().split(\" \"))\ne = 0\ns = 0\nm = 0\nyear = 0\nwhile True: \n    year += 1\n    e += 1",
        "detail": "백준.실버.bruteforce.1476",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1476",
        "description": "백준.실버.bruteforce.1476",
        "peekOfCode": "e = 0\ns = 0\nm = 0\nyear = 0\nwhile True: \n    year += 1\n    e += 1\n    s += 1\n    m += 1\n    if(e > 15):",
        "detail": "백준.실버.bruteforce.1476",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1476",
        "description": "백준.실버.bruteforce.1476",
        "peekOfCode": "s = 0\nm = 0\nyear = 0\nwhile True: \n    year += 1\n    e += 1\n    s += 1\n    m += 1\n    if(e > 15):\n        e = 1",
        "detail": "백준.실버.bruteforce.1476",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1476",
        "description": "백준.실버.bruteforce.1476",
        "peekOfCode": "m = 0\nyear = 0\nwhile True: \n    year += 1\n    e += 1\n    s += 1\n    m += 1\n    if(e > 15):\n        e = 1\n    if(s > 28):",
        "detail": "백준.실버.bruteforce.1476",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1476",
        "description": "백준.실버.bruteforce.1476",
        "peekOfCode": "year = 0\nwhile True: \n    year += 1\n    e += 1\n    s += 1\n    m += 1\n    if(e > 15):\n        e = 1\n    if(s > 28):\n        s = 1",
        "detail": "백준.실버.bruteforce.1476",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.1543",
        "description": "백준.실버.bruteforce.1543",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nstr = input()\ntargetStr = input()\nprint(str.count(targetStr))",
        "detail": "백준.실버.bruteforce.1543",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1543",
        "description": "백준.실버.bruteforce.1543",
        "peekOfCode": "str = input()\ntargetStr = input()\nprint(str.count(targetStr))",
        "detail": "백준.실버.bruteforce.1543",
        "documentation": {}
    },
    {
        "label": "targetStr",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.1543",
        "description": "백준.실버.bruteforce.1543",
        "peekOfCode": "targetStr = input()\nprint(str.count(targetStr))",
        "detail": "백준.실버.bruteforce.1543",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.bruteforce.2003",
        "description": "백준.실버.bruteforce.2003",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\nN, M = map(int, input().split(\" \"))\narr = list(map(int, input().split(\" \")))\ncnt = 0\ntotal = 0\nendPointer = 0\nfor startPointer in range(N):\n    while total < M and endPointer < N:\n        total += arr[endPointer]",
        "detail": "백준.실버.bruteforce.2003",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.2003",
        "description": "백준.실버.bruteforce.2003",
        "peekOfCode": "arr = list(map(int, input().split(\" \")))\ncnt = 0\ntotal = 0\nendPointer = 0\nfor startPointer in range(N):\n    while total < M and endPointer < N:\n        total += arr[endPointer]\n        endPointer += 1\n    if(total == M):\n        cnt += 1",
        "detail": "백준.실버.bruteforce.2003",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.2003",
        "description": "백준.실버.bruteforce.2003",
        "peekOfCode": "cnt = 0\ntotal = 0\nendPointer = 0\nfor startPointer in range(N):\n    while total < M and endPointer < N:\n        total += arr[endPointer]\n        endPointer += 1\n    if(total == M):\n        cnt += 1\n    total -= arr[startPointer]",
        "detail": "백준.실버.bruteforce.2003",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.2003",
        "description": "백준.실버.bruteforce.2003",
        "peekOfCode": "total = 0\nendPointer = 0\nfor startPointer in range(N):\n    while total < M and endPointer < N:\n        total += arr[endPointer]\n        endPointer += 1\n    if(total == M):\n        cnt += 1\n    total -= arr[startPointer]\nprint(cnt)",
        "detail": "백준.실버.bruteforce.2003",
        "documentation": {}
    },
    {
        "label": "endPointer",
        "kind": 5,
        "importPath": "백준.실버.bruteforce.2003",
        "description": "백준.실버.bruteforce.2003",
        "peekOfCode": "endPointer = 0\nfor startPointer in range(N):\n    while total < M and endPointer < N:\n        total += arr[endPointer]\n        endPointer += 1\n    if(total == M):\n        cnt += 1\n    total -= arr[startPointer]\nprint(cnt)",
        "detail": "백준.실버.bruteforce.2003",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.dp.13699",
        "description": "백준.실버.dp.13699",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN = int(input())\ndp = [0] * (N+1)\ndp[0] = 1\nfor i in range(1, N+1):\n    for j in range(i):\n        dp[i] += dp[j] * dp[i-j-1]\nprint(dp[N])",
        "detail": "백준.실버.dp.13699",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.dp.13699",
        "description": "백준.실버.dp.13699",
        "peekOfCode": "N = int(input())\ndp = [0] * (N+1)\ndp[0] = 1\nfor i in range(1, N+1):\n    for j in range(i):\n        dp[i] += dp[j] * dp[i-j-1]\nprint(dp[N])",
        "detail": "백준.실버.dp.13699",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "백준.실버.dp.13699",
        "description": "백준.실버.dp.13699",
        "peekOfCode": "dp = [0] * (N+1)\ndp[0] = 1\nfor i in range(1, N+1):\n    for j in range(i):\n        dp[i] += dp[j] * dp[i-j-1]\nprint(dp[N])",
        "detail": "백준.실버.dp.13699",
        "documentation": {}
    },
    {
        "label": "dp[0]",
        "kind": 5,
        "importPath": "백준.실버.dp.13699",
        "description": "백준.실버.dp.13699",
        "peekOfCode": "dp[0] = 1\nfor i in range(1, N+1):\n    for j in range(i):\n        dp[i] += dp[j] * dp[i-j-1]\nprint(dp[N])",
        "detail": "백준.실버.dp.13699",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.dp.14495",
        "description": "백준.실버.dp.14495",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN = int(input())\nif(N < 3):\n    print(1)\nelse:\n    arr = [0] * (N+1)\n    arr[0] = 1\n    arr[1] = 1\n    arr[2] = 1",
        "detail": "백준.실버.dp.14495",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.dp.14495",
        "description": "백준.실버.dp.14495",
        "peekOfCode": "N = int(input())\nif(N < 3):\n    print(1)\nelse:\n    arr = [0] * (N+1)\n    arr[0] = 1\n    arr[1] = 1\n    arr[2] = 1\n    arr[3] = 2\n    for i in range(4, N):",
        "detail": "백준.실버.dp.14495",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.dp.17175",
        "description": "백준.실버.dp.17175",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN = int(input())\ndp = [1] * (N + 1)\nfor i in range(2, N+1):\n    dp[i] = (dp[i-1] + dp[i-2] + 1) % 1000000007\nprint(dp[N])",
        "detail": "백준.실버.dp.17175",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.dp.17175",
        "description": "백준.실버.dp.17175",
        "peekOfCode": "N = int(input())\ndp = [1] * (N + 1)\nfor i in range(2, N+1):\n    dp[i] = (dp[i-1] + dp[i-2] + 1) % 1000000007\nprint(dp[N])",
        "detail": "백준.실버.dp.17175",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "백준.실버.dp.17175",
        "description": "백준.실버.dp.17175",
        "peekOfCode": "dp = [1] * (N + 1)\nfor i in range(2, N+1):\n    dp[i] = (dp[i-1] + dp[i-2] + 1) % 1000000007\nprint(dp[N])",
        "detail": "백준.실버.dp.17175",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.dp.17484",
        "description": "백준.실버.dp.17484",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN, M = map(int, input().split())\nmaps = []\ndp = [[[float('inf')] * 3 for _ in range(M)] for _ in range(N+1)]\nfor _ in range(N):\n    maps.append(list(map(int, input().split())))\nfor i in range(M):\n    dp[0][i] = [maps[0][i], maps[0][i], maps[0][i]]\nfor y in range(1, N):",
        "detail": "백준.실버.dp.17484",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.dp.17484",
        "description": "백준.실버.dp.17484",
        "peekOfCode": "maps = []\ndp = [[[float('inf')] * 3 for _ in range(M)] for _ in range(N+1)]\nfor _ in range(N):\n    maps.append(list(map(int, input().split())))\nfor i in range(M):\n    dp[0][i] = [maps[0][i], maps[0][i], maps[0][i]]\nfor y in range(1, N):\n    for x in range(M):\n        for i in range(3):\n            # 맨 왼쪽이면 왼쪽 대각선의 위의 값을",
        "detail": "백준.실버.dp.17484",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "백준.실버.dp.17484",
        "description": "백준.실버.dp.17484",
        "peekOfCode": "dp = [[[float('inf')] * 3 for _ in range(M)] for _ in range(N+1)]\nfor _ in range(N):\n    maps.append(list(map(int, input().split())))\nfor i in range(M):\n    dp[0][i] = [maps[0][i], maps[0][i], maps[0][i]]\nfor y in range(1, N):\n    for x in range(M):\n        for i in range(3):\n            # 맨 왼쪽이면 왼쪽 대각선의 위의 값을\n            # 맨 오른쪽이면 오른쪽 대각선 위의 값을",
        "detail": "백준.실버.dp.17484",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "백준.실버.dp.17484",
        "description": "백준.실버.dp.17484",
        "peekOfCode": "result = 1e9\nfor i in range(M):\n    result = min(result, min(dp[N-1][i]))\nprint(result)",
        "detail": "백준.실버.dp.17484",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.dp.2579",
        "description": "백준.실버.dp.2579",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\ndef solvedp():\n    if(N == 1):\n        print(arr[0])\n        return\n    if(N == 2):\n        print(arr[0] + arr[1])\n        return\n    if(N == 3):",
        "detail": "백준.실버.dp.2579",
        "documentation": {}
    },
    {
        "label": "solvedp",
        "kind": 2,
        "importPath": "백준.실버.dp.2579",
        "description": "백준.실버.dp.2579",
        "peekOfCode": "def solvedp():\n    if(N == 1):\n        print(arr[0])\n        return\n    if(N == 2):\n        print(arr[0] + arr[1])\n        return\n    if(N == 3):\n        print(max(arr[2]+arr[1], arr[2]+arr[0]))\n        return",
        "detail": "백준.실버.dp.2579",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.dp.2579",
        "description": "백준.실버.dp.2579",
        "peekOfCode": "N = int(input())\narr = [0] * (N+1)\ndp = [0] * (N+1)\nfor i in range(0, N):\n    arr[i] = int(input())\nsolvedp()",
        "detail": "백준.실버.dp.2579",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.dp.2579",
        "description": "백준.실버.dp.2579",
        "peekOfCode": "arr = [0] * (N+1)\ndp = [0] * (N+1)\nfor i in range(0, N):\n    arr[i] = int(input())\nsolvedp()",
        "detail": "백준.실버.dp.2579",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "백준.실버.dp.2579",
        "description": "백준.실버.dp.2579",
        "peekOfCode": "dp = [0] * (N+1)\nfor i in range(0, N):\n    arr[i] = int(input())\nsolvedp()",
        "detail": "백준.실버.dp.2579",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.dp.2839",
        "description": "백준.실버.dp.2839",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nN = int(input())\nif(N % 5 == 0):\n    print(N // 5)\nelse:\n    p = 0\n    while N > 0:\n        N -= 3\n        p += 1",
        "detail": "백준.실버.dp.2839",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.dp.2839",
        "description": "백준.실버.dp.2839",
        "peekOfCode": "N = int(input())\nif(N % 5 == 0):\n    print(N // 5)\nelse:\n    p = 0\n    while N > 0:\n        N -= 3\n        p += 1\n        if(N % 5 == 0):\n            print(N//5 + p)",
        "detail": "백준.실버.dp.2839",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.implementation.1051",
        "description": "백준.실버.implementation.1051",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\n    # 탑다운 방식으로 찾다가 찾으면 바로 종료하는 느낌으로다가.\n    # 정사각형의 최대 크기는 min(N or M) * min(N or M)이 된다.\nN, M = map(int, input().split(\" \"))\narr = []\nfor _ in range(N):\n    arr.append(list(map(int, input())))\n# 정사각형이기에 최소값이 곧 길이\nminValue = min(N, M)",
        "detail": "백준.실버.implementation.1051",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.implementation.1051",
        "description": "백준.실버.implementation.1051",
        "peekOfCode": "arr = []\nfor _ in range(N):\n    arr.append(list(map(int, input())))\n# 정사각형이기에 최소값이 곧 길이\nminValue = min(N, M)\nfor a in range(minValue-1, 0, -1):\n    # 한칸씩 줄일때마다 상하좌우로 한칸씩 이동하면서 찾아야함.\n    for y in range(N):\n        for x in range(M):\n            yIndex = y + a",
        "detail": "백준.실버.implementation.1051",
        "documentation": {}
    },
    {
        "label": "minValue",
        "kind": 5,
        "importPath": "백준.실버.implementation.1051",
        "description": "백준.실버.implementation.1051",
        "peekOfCode": "minValue = min(N, M)\nfor a in range(minValue-1, 0, -1):\n    # 한칸씩 줄일때마다 상하좌우로 한칸씩 이동하면서 찾아야함.\n    for y in range(N):\n        for x in range(M):\n            yIndex = y + a\n            xIndex = x + a\n            if(yIndex >= N or xIndex >= M):\n                continue\n            isSame = arr[y][x] == arr[y][xIndex] == arr[yIndex][x] == arr[yIndex][xIndex]",
        "detail": "백준.실버.implementation.1051",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.implementation.1316",
        "description": "백준.실버.implementation.1316",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\narr = []\ncnt = 0\nisSuccess = True\nN = int(input())\nfor i in range(N):\n    str = input()\n    # 마지막 문자열 기록\n    beforeStr = str[0]",
        "detail": "백준.실버.implementation.1316",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.implementation.1316",
        "description": "백준.실버.implementation.1316",
        "peekOfCode": "arr = []\ncnt = 0\nisSuccess = True\nN = int(input())\nfor i in range(N):\n    str = input()\n    # 마지막 문자열 기록\n    beforeStr = str[0]\n    for k in range(len(str)):\n        # 이미 나왔던 문자열인데 떨어진 경우라면",
        "detail": "백준.실버.implementation.1316",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.implementation.1316",
        "description": "백준.실버.implementation.1316",
        "peekOfCode": "cnt = 0\nisSuccess = True\nN = int(input())\nfor i in range(N):\n    str = input()\n    # 마지막 문자열 기록\n    beforeStr = str[0]\n    for k in range(len(str)):\n        # 이미 나왔던 문자열인데 떨어진 경우라면\n        if str[k] in arr:",
        "detail": "백준.실버.implementation.1316",
        "documentation": {}
    },
    {
        "label": "isSuccess",
        "kind": 5,
        "importPath": "백준.실버.implementation.1316",
        "description": "백준.실버.implementation.1316",
        "peekOfCode": "isSuccess = True\nN = int(input())\nfor i in range(N):\n    str = input()\n    # 마지막 문자열 기록\n    beforeStr = str[0]\n    for k in range(len(str)):\n        # 이미 나왔던 문자열인데 떨어진 경우라면\n        if str[k] in arr:\n            isSuccess = False",
        "detail": "백준.실버.implementation.1316",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.implementation.1316",
        "description": "백준.실버.implementation.1316",
        "peekOfCode": "N = int(input())\nfor i in range(N):\n    str = input()\n    # 마지막 문자열 기록\n    beforeStr = str[0]\n    for k in range(len(str)):\n        # 이미 나왔던 문자열인데 떨어진 경우라면\n        if str[k] in arr:\n            isSuccess = False\n            break",
        "detail": "백준.실버.implementation.1316",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.implementation.17413",
        "description": "백준.실버.implementation.17413",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nS = input()\nisTag = False\nstack = []\nstr = \"\"\n# 정상 출력해야 하는 경우\n# ㄴ 태그 안에 있을 때\n# 반대 출력 할 때\n# ㄴ 태그 밖에 있을 때",
        "detail": "백준.실버.implementation.17413",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "백준.실버.implementation.17413",
        "description": "백준.실버.implementation.17413",
        "peekOfCode": "S = input()\nisTag = False\nstack = []\nstr = \"\"\n# 정상 출력해야 하는 경우\n# ㄴ 태그 안에 있을 때\n# 반대 출력 할 때\n# ㄴ 태그 밖에 있을 때\n# 언제 출력?\n# 공백, 닫힘 태그, 열림 태그, 맨 마지막",
        "detail": "백준.실버.implementation.17413",
        "documentation": {}
    },
    {
        "label": "isTag",
        "kind": 5,
        "importPath": "백준.실버.implementation.17413",
        "description": "백준.실버.implementation.17413",
        "peekOfCode": "isTag = False\nstack = []\nstr = \"\"\n# 정상 출력해야 하는 경우\n# ㄴ 태그 안에 있을 때\n# 반대 출력 할 때\n# ㄴ 태그 밖에 있을 때\n# 언제 출력?\n# 공백, 닫힘 태그, 열림 태그, 맨 마지막\nfor i in range(len(S)):",
        "detail": "백준.실버.implementation.17413",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "백준.실버.implementation.17413",
        "description": "백준.실버.implementation.17413",
        "peekOfCode": "stack = []\nstr = \"\"\n# 정상 출력해야 하는 경우\n# ㄴ 태그 안에 있을 때\n# 반대 출력 할 때\n# ㄴ 태그 밖에 있을 때\n# 언제 출력?\n# 공백, 닫힘 태그, 열림 태그, 맨 마지막\nfor i in range(len(S)):\n    if(S[i] == \"<\"):",
        "detail": "백준.실버.implementation.17413",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "백준.실버.implementation.17413",
        "description": "백준.실버.implementation.17413",
        "peekOfCode": "str = \"\"\n# 정상 출력해야 하는 경우\n# ㄴ 태그 안에 있을 때\n# 반대 출력 할 때\n# ㄴ 태그 밖에 있을 때\n# 언제 출력?\n# 공백, 닫힘 태그, 열림 태그, 맨 마지막\nfor i in range(len(S)):\n    if(S[i] == \"<\"):\n        if(isTag == False):",
        "detail": "백준.실버.implementation.17413",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.implementation.1966",
        "description": "백준.실버.implementation.1966",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nK = int(input())\ncnt = 0\nfor i in range(K):\n    N, M = map(int, input().split())\n    arr = list(map(int, input().split()))\n    Q = deque()\n    # json 형식으로\n    for q in range(N):",
        "detail": "백준.실버.implementation.1966",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "백준.실버.implementation.1966",
        "description": "백준.실버.implementation.1966",
        "peekOfCode": "K = int(input())\ncnt = 0\nfor i in range(K):\n    N, M = map(int, input().split())\n    arr = list(map(int, input().split()))\n    Q = deque()\n    # json 형식으로\n    for q in range(N):\n        data = {\n            \"value\": arr[q],",
        "detail": "백준.실버.implementation.1966",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.implementation.1966",
        "description": "백준.실버.implementation.1966",
        "peekOfCode": "cnt = 0\nfor i in range(K):\n    N, M = map(int, input().split())\n    arr = list(map(int, input().split()))\n    Q = deque()\n    # json 형식으로\n    for q in range(N):\n        data = {\n            \"value\": arr[q],\n            \"isYn\": M == q",
        "detail": "백준.실버.implementation.1966",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\n# 산술평균\ndef fun1():\n    value = sum(arr) / N\n    return round(value)\n# 중앙값\ndef fun2():\n    tempArr = arr\n    tempArr.sort()",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "fun1",
        "kind": 2,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "def fun1():\n    value = sum(arr) / N\n    return round(value)\n# 중앙값\ndef fun2():\n    tempArr = arr\n    tempArr.sort()\n    idx = len(tempArr) // 2\n    return arr[idx]\n# 최빈값",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "fun2",
        "kind": 2,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "def fun2():\n    tempArr = arr\n    tempArr.sort()\n    idx = len(tempArr) // 2\n    return arr[idx]\n# 최빈값\ndef fun3():\n    count = Counter(arr) \n    tempArr = count.most_common()\n    maxCnt = tempArr[0][1]",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "fun3",
        "kind": 2,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "def fun3():\n    count = Counter(arr) \n    tempArr = count.most_common()\n    maxCnt = tempArr[0][1]\n    modes = []\n    for data in tempArr:\n        if(data[1] == maxCnt):\n            modes.append(data[0])\n    if(len(modes) > 1):\n        return sorted(modes)[1]",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "fun4",
        "kind": 2,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "def fun4():\n    return max(arr) - min(arr)\nN = int(input())\narr = []\nfor _ in range(N):\n    arr.append(int(input()))\nprint(fun1())\nprint(fun2())\nprint(fun3())\nprint(fun4())",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "N = int(input())\narr = []\nfor _ in range(N):\n    arr.append(int(input()))\nprint(fun1())\nprint(fun2())\nprint(fun3())\nprint(fun4())",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.implementation.2108",
        "description": "백준.실버.implementation.2108",
        "peekOfCode": "arr = []\nfor _ in range(N):\n    arr.append(int(input()))\nprint(fun1())\nprint(fun2())\nprint(fun3())\nprint(fun4())",
        "detail": "백준.실버.implementation.2108",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "def input():\n    return sys.stdin.readline().strip()\nstr = input()\narr = ['c=', 'c-', 'dz=', 'd-', 'lj', 'nj', 's=', 'z=']\ncnt = 0\nstrLength = 0\nlastIndex = 0\ntempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "str = input()\narr = ['c=', 'c-', 'dz=', 'd-', 'lj', 'nj', 's=', 'z=']\ncnt = 0\nstrLength = 0\nlastIndex = 0\ntempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]\n    for target in arr:\n        if target in tempStr[lastIndex:]:",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "arr = ['c=', 'c-', 'dz=', 'd-', 'lj', 'nj', 's=', 'z=']\ncnt = 0\nstrLength = 0\nlastIndex = 0\ntempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]\n    for target in arr:\n        if target in tempStr[lastIndex:]:\n            cnt += 1",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "cnt = 0\nstrLength = 0\nlastIndex = 0\ntempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]\n    for target in arr:\n        if target in tempStr[lastIndex:]:\n            cnt += 1\n            lastIndex = i+1",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "strLength",
        "kind": 5,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "strLength = 0\nlastIndex = 0\ntempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]\n    for target in arr:\n        if target in tempStr[lastIndex:]:\n            cnt += 1\n            lastIndex = i+1\n            strLength += len(target)",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "lastIndex",
        "kind": 5,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "lastIndex = 0\ntempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]\n    for target in arr:\n        if target in tempStr[lastIndex:]:\n            cnt += 1\n            lastIndex = i+1\n            strLength += len(target)\n            break",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "tempStr",
        "kind": 5,
        "importPath": "백준.실버.implementation.2941",
        "description": "백준.실버.implementation.2941",
        "peekOfCode": "tempStr = \"\"\nfor i in range(len(str)):\n    tempStr += str[i]\n    for target in arr:\n        if target in tempStr[lastIndex:]:\n            cnt += 1\n            lastIndex = i+1\n            strLength += len(target)\n            break\nprint(cnt + len(str) - strLength)",
        "detail": "백준.실버.implementation.2941",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "프로그래머스.카카오.150370",
        "description": "프로그래머스.카카오.150370",
        "peekOfCode": "def solution(today, terms, privacies):\n    year, month, day = map(int, today.split(\".\"))\n    yearInt = (year - 2000) * 336\n    monthInt = month * 28\n    currentDayInt = yearInt + monthInt + day\n    hashmap = {}\n    result = []\n    for term in terms:\n        key, value = term.split(\" \")\n        hashmap[key] = int(value)",
        "detail": "프로그래머스.카카오.150370",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "프로그래머스.카카오.17680",
        "description": "프로그래머스.카카오.17680",
        "peekOfCode": "def solution(cacheSize, cities):\n    arr = []\n    cnt = 0\n    for city in cities:\n        city = city.lower()\n        if city in arr:\n            arr.remove(city)\n            arr.insert(0, city)\n            cnt += 1\n        else:",
        "detail": "프로그래머스.카카오.17680",
        "documentation": {}
    },
    {
        "label": "to_binary_number",
        "kind": 2,
        "importPath": "프로그래머스.카카오.17681",
        "description": "프로그래머스.카카오.17681",
        "peekOfCode": "def to_binary_number(number, n):    \n    return bin(number)[2:].zfill(n)\ndef solution(n, arr1, arr2):\n    maps1 = [to_binary_number(num, n) for num in arr1]\n    maps2 = [to_binary_number(num, n) for num in arr2]\n    result = []\n    for row1, row2 in zip(maps1, maps2):\n        line = ''\n        for a, b in zip(row1, row2):\n            line += '#' if a == '1' or b == '1' else ' '",
        "detail": "프로그래머스.카카오.17681",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "프로그래머스.카카오.17681",
        "description": "프로그래머스.카카오.17681",
        "peekOfCode": "def solution(n, arr1, arr2):\n    maps1 = [to_binary_number(num, n) for num in arr1]\n    maps2 = [to_binary_number(num, n) for num in arr2]\n    result = []\n    for row1, row2 in zip(maps1, maps2):\n        line = ''\n        for a, b in zip(row1, row2):\n            line += '#' if a == '1' or b == '1' else ' '\n        result.append(line)\n    return result",
        "detail": "프로그래머스.카카오.17681",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "프로그래머스.카카오.81301",
        "description": "프로그래머스.카카오.81301",
        "peekOfCode": "def solution(s):\n    pattern = re.compile(r'zero|one|two|three|four|five|six|seven|eight|nine|\\d+', re.IGNORECASE)\n    matches = pattern.findall(s)\n    result = ''\n    for number in matches:\n        if number in number_list:\n            result += number_list[number]\n        else:\n            result += number\n    return int(result)",
        "detail": "프로그래머스.카카오.81301",
        "documentation": {}
    },
    {
        "label": "number_list",
        "kind": 5,
        "importPath": "프로그래머스.카카오.81301",
        "description": "프로그래머스.카카오.81301",
        "peekOfCode": "number_list = {\n    \"zero\": \"0\",\n    \"one\": \"1\",\n    \"two\": \"2\",\n    \"three\": \"3\",\n    \"four\": \"4\",\n    \"five\": \"5\",\n    \"six\": \"6\",\n    \"seven\": \"7\",\n    \"eight\": \"8\",",
        "detail": "프로그래머스.카카오.81301",
        "documentation": {}
    }
]