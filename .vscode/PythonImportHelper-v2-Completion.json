[
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            nextX = nowX + moveX[i]\n            nextY = nowY + moveY[i]\n            if(nextX >= N or nextY >= N or nextX < 0 or nextY < 0):",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "N = int(input())\nnormalCnt = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "normalCnt",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "normalCnt = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "cnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "moveY = [0, -1, 0, 1]\noriginPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "originPicture",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "originPicture = []\nresult = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "백준.골드.10026",
        "description": "백준.골드.10026",
        "peekOfCode": "result = \"\"\nfor i in range(N):\n    # originPicture.append(list(lines[i+1].strip()))\n    originPicture.append(list(input().strip()))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        nowX, nowY = Q.popleft()",
        "detail": "백준.골드.10026",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.1261",
        "description": "백준.골드.1261",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]\n    while Q:\n        nowY, nowX = Q.popleft()\n        for i in range(4):\n            nextX = nowX + moveX[i] # 열\n            nextY = nowY + moveY[i] # 행\n            if(nextX >= M or nextX < 0 or nextY >= N or nextY < 0):",
        "detail": "백준.골드.1261",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.1261",
        "description": "백준.골드.1261",
        "peekOfCode": "graph = []\ndist = [[-1] * M for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))",
        "detail": "백준.골드.1261",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "백준.골드.1261",
        "description": "백준.골드.1261",
        "peekOfCode": "dist = [[-1] * M for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]",
        "detail": "백준.골드.1261",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.1261",
        "description": "백준.골드.1261",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]\n    while Q:",
        "detail": "백준.골드.1261",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.1261",
        "description": "백준.골드.1261",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1].strip())))\n    graph.append(list(map(int, input().strip())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    dist[y][x] = graph[y][x]\n    while Q:\n        nowY, nowX = Q.popleft()",
        "detail": "백준.골드.1261",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.골드.13265",
        "description": "백준.골드.13265",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef bfs(node):\n    Q = deque()\n    Q.append(node)\n    colors[node] = 0\n    while Q:\n        a = Q.popleft()\n        for b in maps[a]:\n            # 연결",
        "detail": "백준.골드.13265",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.13265",
        "description": "백준.골드.13265",
        "peekOfCode": "def bfs(node):\n    Q = deque()\n    Q.append(node)\n    colors[node] = 0\n    while Q:\n        a = Q.popleft()\n        for b in maps[a]:\n            # 연결\n            if(colors[b] == -1):\n                Q.append(b)",
        "detail": "백준.골드.13265",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "백준.골드.13265",
        "description": "백준.골드.13265",
        "peekOfCode": "T = int(input())\n# 테스트 케이스 개수만큼 반복\nfor _ in range(T):\n    n, m = map(int, input().split(\" \"))\n    result = []\n    # 인접 리스트\n    maps = [[] for _ in range(n + 1)]\n    colors = [-1] * (n + 1)\n    # 동그라미 연결\n    for _ in range(m):",
        "detail": "백준.골드.13265",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.13549",
        "description": "백준.골드.13549",
        "peekOfCode": "def bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()\n        if(current == taret):\n            return graph[current]\n        a = current * 2\n        b = current + 1",
        "detail": "백준.골드.13549",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "백준.골드.13549",
        "description": "백준.골드.13549",
        "peekOfCode": "data = input().split(\" \")\nN, K = map(int, data)\nMAX = 200000\ngraph = [-1] * (MAX + 1)\ndef bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()",
        "detail": "백준.골드.13549",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "백준.골드.13549",
        "description": "백준.골드.13549",
        "peekOfCode": "MAX = 200000\ngraph = [-1] * (MAX + 1)\ndef bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()\n        if(current == taret):\n            return graph[current]",
        "detail": "백준.골드.13549",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.13549",
        "description": "백준.골드.13549",
        "peekOfCode": "graph = [-1] * (MAX + 1)\ndef bfs(now, taret):\n    Q = deque()\n    Q.append(now)\n    graph[now] = 0\n    while Q:\n        current = Q.popleft()\n        if(current == taret):\n            return graph[current]\n        a = current * 2",
        "detail": "백준.골드.13549",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    union = []\n    union.append((x, y))\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            nX = nowX + moveX[i]",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nstart = True\ntemp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nstart = True\ntemp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "start = True\ntemp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "temp = []\ngraph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "graph = []\nday = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "day",
        "kind": 5,
        "importPath": "백준.골드.16234",
        "description": "백준.골드.16234",
        "peekOfCode": "day = 0\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split(\" \")))\n    arr = list(map(int, input().split(\" \")))\n    graph.append(arr)\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[y][x] = True\n    union = []",
        "detail": "백준.골드.16234",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.1707",
        "description": "백준.골드.1707",
        "peekOfCode": "def bfs(value):\n    Q = deque()\n    Q.append(value)\n    colors[value] = 0\n    while Q:\n        a = Q.popleft()\n        for z in maps[a]:\n            # 첫 방문이라면 원본 노드의 반대 색상\n            if(colors[z] == -1):\n                Q.append(z)",
        "detail": "백준.골드.1707",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "백준.골드.1707",
        "description": "백준.골드.1707",
        "peekOfCode": "K = int(sys.stdin.readline())\nfor _ in range(K):\n    V, E = map(int, sys.stdin.readline().split(\" \"))\n    maps = [[] for _ in range(V+1)]\n    colors = [-1] * (V+1)\n    # 인접리스트 구현\n    for _ in range(E):\n        u, v = map(int, sys.stdin.readline().split(\" \"))\n        maps[u].append(v)\n        maps[v].append(u)",
        "detail": "백준.골드.1707",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.골드.2665",
        "description": "백준.골드.2665",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0\n    while Q:\n        nowX, nowY = Q.popleft()\n        for i in range(4):\n            nX = nowX + moveX[i]\n            nY = nowY + moveY[i]\n            if(nX >= N or nX < 0 or nY >= N or nY < 0):",
        "detail": "백준.골드.2665",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.골드.2665",
        "description": "백준.골드.2665",
        "peekOfCode": "N = int(input())\ngraph = []\ndist = [[-1] * N for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.골드.2665",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.골드.2665",
        "description": "백준.골드.2665",
        "peekOfCode": "graph = []\ndist = [[-1] * N for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.골드.2665",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "백준.골드.2665",
        "description": "백준.골드.2665",
        "peekOfCode": "dist = [[-1] * N for _ in range(N)]\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0",
        "detail": "백준.골드.2665",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.2665",
        "description": "백준.골드.2665",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0\n    while Q:",
        "detail": "백준.골드.2665",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.2665",
        "description": "백준.골드.2665",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nfor i in range(N):\n    # graph.append(list(map(int, lines[i+1])))\n    graph.append(list(map(int, input())))\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    dist[y][x] = 0\n    while Q:\n        nowX, nowY = Q.popleft()",
        "detail": "백준.골드.2665",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "box = []\nfor i in range(N):\n    # box.append(list(map(int, lines[i+1].split())))\n    box.append(list(map(int, input().split())))\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nQ = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()\n    for i in range(4):",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "Q = deque()\n# 익은 토마토 먼저 전부 담기\nfor x in range(N):\n    for y in range(M):\n        if(box[x][y] == 1):\n            Q.append((x, y))\nwhile Q:\n    nowX, nowY = Q.popleft()\n    for i in range(4):\n        nextX = nowX + moveX[i]",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "maxDay",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "maxDay = max(map(max, box))\nhasZero = any(0 in row for row in box)\nif(maxDay == 1):\n    print(0)\nelif(hasZero):\n    print(-1)\nelse:\n    print(maxDay-1)",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "hasZero",
        "kind": 5,
        "importPath": "백준.골드.7576",
        "description": "백준.골드.7576",
        "peekOfCode": "hasZero = any(0 in row for row in box)\nif(maxDay == 1):\n    print(0)\nelif(hasZero):\n    print(-1)\nelse:\n    print(maxDay-1)",
        "detail": "백준.골드.7576",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]\n            newX = x + moveX[i]\n            if(newY < 0 or newX < 0 or newY >= n or newX >= m):",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ncnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ncnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "cnt = 0\ndef bfs(x, y):\n    Q = deque()\n    Q.append((y, x))\n    graph[y][x] = 0\n    while Q:\n        y, x = Q.popleft()\n        for i in range(4):\n            newY = y + moveY[i]\n            newX = x + moveX[i]",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "백준.실버.1012",
        "description": "백준.실버.1012",
        "peekOfCode": "T = int(input())\nfor _ in range(T):\n    # m=가로, n=세로, k=심어져있는배추개수\n    m, n, k = map(int, input().split())\n    graph = [[0]*m for _ in range(n)]\n    # 그래프 그리기\n    for _ in range(k):\n        x, y = map(int, input().split())\n        graph[y][x] = 1\n    # 인접 행렬 그래프이기 때문에 전체를 순환하면서 확인",
        "detail": "백준.실버.1012",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "def bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:\n        a = Q.popleft()\n        for i in list[a]:\n            if(visited[i] == False):\n                visited[i] = True\n                Q.append(i)\nfor i in range(1, N+1):",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "input = sys.stdin.readline\nN, M = map(int, input().split())\nlist = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "list = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "visited = [False] * (N+1)\ncnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.11724",
        "description": "백준.실버.11724",
        "peekOfCode": "cnt = 0\nfor i in range(M):\n    a, b = map(int, input().split())\n    list[a].append(b)\n    list[b].append(a)\ndef bfs(k):\n    Q = deque([k])\n    visited[k] = True\n    while Q:\n        a = Q.popleft()",
        "detail": "백준.실버.11724",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "def bfs():\n    Q = deque([1])\n    while Q:\n        a = Q.popleft()\n        for i in graph[a]:\n            if(maps[i] == 0):\n                maps[i] = a\n                Q.append(i)\nbfs()\nfor i in range(2, N+1):",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "input = sys.stdin.readline\nN = int(input())\ngraph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "N = int(input())\ngraph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "graph = [[] for _ in range(N+1)]\nmaps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])\n    while Q:",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.11725",
        "description": "백준.실버.11725",
        "peekOfCode": "maps = [0] * (N+1)\nfor i in range(1, N):\n    # a, b = map(int, lines[i].split())\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\ndef bfs():\n    Q = deque([1])\n    while Q:\n        a = Q.popleft()",
        "detail": "백준.실버.11725",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.1697",
        "description": "백준.실버.1697",
        "peekOfCode": "def bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]\n        for i in (a-1, a+1, a*2):\n            if(i >= 0 and i <= MAX and visited[i] == 0):",
        "detail": "백준.실버.1697",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "백준.실버.1697",
        "description": "백준.실버.1697",
        "peekOfCode": "MAX = 10 ** 5\nvisited = [0]* (MAX+1)\ndef bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]",
        "detail": "백준.실버.1697",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.1697",
        "description": "백준.실버.1697",
        "peekOfCode": "visited = [0]* (MAX+1)\ndef bfs(n):\n    q = deque()\n    q.append(n)\n    while q:\n        a = q.popleft()\n        if(a == K):\n            q.clear()\n            return visited[a]\n        for i in (a-1, a+1, a*2):",
        "detail": "백준.실버.1697",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef dfs(x, y, count):\n    visited[y][x] = True\n    for i in range(4):\n        newX = x + moveX[i]\n        newY = y + moveY[i]\n        if(visited[newY][newX] == True):\n            continue\n        if(newY >= n or newY < 0 or newX >= m or newX < 0):",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "def dfs(x, y, count):\n    visited[y][x] = True\n    for i in range(4):\n        newX = x + moveX[i]\n        newY = y + moveY[i]\n        if(visited[newY][newX] == True):\n            continue\n        if(newY >= n or newY < 0 or newX >= m or newX < 0):\n            continue\n        if(maps[newY][newX] == 1):",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "maxWidth",
        "kind": 5,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "maxWidth = 0\ncnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "cnt = 0\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "moveY = [0, -1, 0, 1]\nmaps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = dfs(x, y, 0)",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "maps = []\nvisited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = dfs(x, y, 0)\n            if(result > maxWidth):",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.1926-dfs",
        "description": "백준.실버.1926-dfs",
        "peekOfCode": "visited = [[False] * (m+1) for _ in range(n+1)]\nfor _ in range(n):\n    maps.append(list(map(int, input().split(\" \"))))\nfor y in range(n):\n    for x in range(m):\n        if(visited[y][x] == False and maps[y][x] == 1):\n            cnt += 1\n            result = dfs(x, y, 0)\n            if(result > maxWidth):\n                maxWidth = result",
        "detail": "백준.실버.1926-dfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "def bfs(x, y):\n    Q = deque()\n    Q.append((x, y))\n    visited[x][y] = True\n    while Q:\n        a, b = Q.popleft()\n        for i in range(4):\n            nextX = a + moveX[i]\n            nextY = b + moveY[i]\n            # 범위를 벗어났거나 물에 잠긴 경우 스킵",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "N = int(sys.stdin.readline())\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ngraph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):\n    Q = deque()",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "graph = [[0] * N for _ in range(N)]\n# 그래프 그리기\nfor i in range(N):\n    # arr = list(map(int, lines[i+1].split()))\n    arr = list(map(int, input().split()))\n    for k in range(N):\n        graph[i][k] = arr[k]\ndef bfs(x, y):\n    Q = deque()\n    Q.append((x, y))",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "maxRegion",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "maxRegion = max(map(max, graph))\ncounts = []\nfor r in range(maxRegion+1):\n    visited = [[False] * N for _ in range(N)]\n    cnt = 0\n    for i in range(N): #행\n        for k in range(N):  #열\n            if(graph[i][k] > r and not visited[i][k]):\n                bfs(i, k)\n                cnt += 1",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "백준.실버.2468",
        "description": "백준.실버.2468",
        "peekOfCode": "counts = []\nfor r in range(maxRegion+1):\n    visited = [[False] * N for _ in range(N)]\n    cnt = 0\n    for i in range(N): #행\n        for k in range(N):  #열\n            if(graph[i][k] > r and not visited[i][k]):\n                bfs(i, k)\n                cnt += 1\n    counts.append(cnt)",
        "detail": "백준.실버.2468",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "input = sys.stdin.read\ninput_data = input().splitlines()\nN = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "input_data = input().splitlines()\nN = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "N = int(input_data[0])\nM = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "M = int(input_data[1])\ngraph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "graph = [[] for i in range(N+1)]\nvisited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0\nQ = deque([1])",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "visited = [False] * (N+1)\n# 노드 서로 연결\nfor line in input_data[2:]:\n    a,b=map(int, line.split())\n    graph[a].append(b)\n    graph[b].append(a)\nvisited[1] = True\ncnt = 0\nQ = deque([1])\nwhile Q:",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "visited[1]",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "visited[1] = True\ncnt = 0\nQ = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "cnt = 0\nQ = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1\nprint(cnt)",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "백준.실버.2606-bfs",
        "description": "백준.실버.2606-bfs",
        "peekOfCode": "Q = deque([1])\nwhile Q:\n    c=Q.popleft()\n    for i in graph[c]:\n        if visited[i]!=True:\n            Q.append(i)\n            visited[i] = True\n            cnt += 1\nprint(cnt)",
        "detail": "백준.실버.2606-bfs",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "def input():\n    return sys.stdin.readline()\ndef dfs(node):\n    visited[node] = True\n    global cnt\n    for e in maps[node]:\n        if(visited[e] == False):\n            cnt += 1\n            dfs(e)\nN = int(input())",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "def dfs(node):\n    visited[node] = True\n    global cnt\n    for e in maps[node]:\n        if(visited[e] == False):\n            cnt += 1\n            dfs(e)\nN = int(input())\nK = int(input())\nglobal cnt",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "N = int(input())\nK = int(input())\nglobal cnt\nmaps = [[] for _ in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "K = int(input())\nglobal cnt\nmaps = [[] for _ in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "maps",
        "kind": 5,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "maps = [[] for _ in range(N+1)]\nvisited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)\ndfs(1)\nprint(cnt)",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "visited = [False] * (N+1)\ncnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)\ndfs(1)\nprint(cnt)",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.2606-dfs",
        "description": "백준.실버.2606-dfs",
        "peekOfCode": "cnt = 0\n# 노드 연결\nfor _ in range(K):\n    a, b = map(int, input().split(\" \"))\n    maps[a].append(b)\n    maps[b].append(a)\ndfs(1)\nprint(cnt)",
        "detail": "백준.실버.2606-dfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "def bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):\n            ny = y + moveY[i]\n            nx = x + moveX[i]",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "n = int(input())\ncnt = 0\nmapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "cnt = 0\nmapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "mapCnts",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "mapCnts = []\narr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "arr = []\nmoveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "moveX",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "moveX = [1, 0, -1, 0]\nmoveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):",
        "detail": "백준.실버.2667",
        "documentation": {}
    },
    {
        "label": "moveY",
        "kind": 5,
        "importPath": "백준.실버.2667",
        "description": "백준.실버.2667",
        "peekOfCode": "moveY = [0, -1, 0, 1]\ndef bfs(a, b):\n    Q = deque()\n    Q.append((a, b))\n    arr[b][a] = 0\n    mapCnt = 1\n    while Q:\n        x, y = Q.popleft()\n        for i in range(4):\n            ny = y + moveY[i]",
        "detail": "백준.실버.2667",
        "documentation": {}
    }
]